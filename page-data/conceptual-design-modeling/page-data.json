{"componentChunkName":"component---src-templates-post-jsx","path":"/conceptual-design-modeling/","result":{"data":{"site":{"siteMetadata":{"title":"nineruler's blog"}},"markdownRemark":{"id":"2a97d58f-706a-53ac-a1c6-5140580f5fe4","excerpt":"Conceptual Modeling 복잡한 시스템이나 현상을 이해하기 위해 개념적으로 추상화된 모델을 생성하는 프로세스. 이 모델은 현실 세계의 요소와 그들 간의 관계를 나타내고, 이를 단순화하여 이해하기 쉽도록 돕는 도구이다. Conceptual Modeling 목적 이해와 의사소통 요구사항 정의 분석 및 설계 복잡성 관리 Conceptual Model…","html":"<h2>Conceptual Modeling</h2>\n<p>복잡한 시스템이나 현상을 이해하기 위해 개념적으로 추상화된 모델을 생성하는 프로세스. 이 모델은 현실 세계의 요소와 그들 간의 관계를 나타내고, 이를 단순화하여 이해하기 쉽도록 돕는 도구이다.</p>\n<h3>Conceptual Modeling 목적</h3>\n<ol>\n<li>이해와 의사소통</li>\n<li>요구사항 정의</li>\n<li>분석 및 설계</li>\n<li>복잡성 관리</li>\n</ol>\n<h3>Conceptual Modeling 요소</h3>\n<ol>\n<li>\n<p>엔터티(Entity)와 속성(Attribute)</p>\n<ul>\n<li>현실 세계의 객체나 개념을 나타내는 엔터티와 그 엔터티의 특성을 나타내는 속성을 정의.</li>\n</ul>\n</li>\n<li>\n<p>관계(Relationship)</p>\n<ul>\n<li>엔터티들 간의 관계를 정의하여 시스템 내부의 상호 작용을 모델링.</li>\n</ul>\n</li>\n<li>\n<p>클래스(Class)와 객체(Object)</p>\n<ul>\n<li>객체 지향적 접근에서 클래스는 유사한 특성과 동작을 가진 엔터티의 집합을 나타내며, 객체는 실제로 존재하는 클래스의 인스턴스를 나타낸다.</li>\n</ul>\n</li>\n<li>\n<p>다이어그램(Diagram)</p>\n<ul>\n<li>Conceptual Modeling을 시각적으로 나타내는 도구로, UML(Unified Modeling Language) 다이어그램과 같은 것들이 사용된다.</li>\n</ul>\n</li>\n<li>\n<p>표준 모델링 언어</p>\n<ul>\n<li>시스템을 모델링하는 데 사용되는 표준 언어로는 UML, ER(Entity-Relationship) 다이어그램, BPMN(Business Process Model and Notation) 등이 있다.</li>\n</ul>\n</li>\n<li>\n<p>모델링 도구</p>\n<ul>\n<li>컴퓨터 소프트웨어를 사용하여 Conceptual Modeling을 수행할 수 있는 도구와 소프트웨어가 있다.</li>\n</ul>\n</li>\n</ol>\n<p>Conceptual Modeling은 시스템 설계와 구축의 초기 단계에서 중요한 역할을 한다. 이를 통해 요구사항이 명확하게 정의되고, 모든 관계자들이 공통된 이해를 갖게 되어 프로젝트의 성공 확률을 높일 수 있다.</p>\n<h2>Design Modeling</h2>\n<p>시스템이나 제품의 실제 구조와 동작을 세부적으로 설계하고 나타내는 프로세스이다. 이 단계에서는 Conceptual Modeling에서 정의한 개념들을 구체적인 구성 요소와 상호 작용으로 변환하여 시스템의 실제 동작 방식을 묘사한다. Design Modeling은 주로 소프트웨어 개발 및 공학 분야에서 활용되며, 시스템 설계의 중요한 부분을 이룬다.</p>\n<h3>Design Modeling 목적</h3>\n<ol>\n<li>\n<p>시스템 구조 설계</p>\n<ul>\n<li>시스템의 구성 요소, 모듈, 클래스 등을 정의하고 그들 간의 관계와 상호 작용을 설계.</li>\n</ul>\n</li>\n<li>\n<p>동작 설계</p>\n<ul>\n<li>시스템이 어떻게 동작할지를 정의하고, 각 상황에 따른 동작 흐름과 프로세스를 모델링.</li>\n</ul>\n</li>\n<li>\n<p>인터페이스 설계</p>\n<ul>\n<li>시스템의 내부 구성 요소와 외부 요소(사용자, 다른 시스템 등) 간의 인터페이스를 설계하여 상호 작용을 관리.</li>\n</ul>\n</li>\n<li>\n<p>데이터 구조 설계</p>\n<ul>\n<li>데이터베이스의 테이블, 필드, 관계 등을 설계하고 데이터의 흐름과 저장 방식을 정의.</li>\n</ul>\n</li>\n<li>\n<p>시스템 최적화</p>\n<ul>\n<li>성능, 확장성, 유지보수성 등을 고려하여 시스템을 최적화하는 설계를 수행.</li>\n</ul>\n</li>\n</ol>\n<h3>Design Modeling 방법</h3>\n<ol>\n<li>\n<p>UML 다이어그램</p>\n<ul>\n<li>Unified Modeling Language(UML)은 객체 지향 소프트웨어 설계를 위한 표준 언어</li>\n<li>다양한 다이어그램(클래스 다이어그램, 시퀀스 다이어그램, 상태 다이어그램 등)을 사용하여 시스템의 다양한 측면을 모델링.</li>\n</ul>\n</li>\n<li>\n<p>데이터베이스 모델링</p>\n<ul>\n<li>데이터베이스 시스템을 설계할 때 엔터티, 속성, 관계 등을 모델링하여 데이터의 구조와 저장 방식을 결정.</li>\n</ul>\n</li>\n<li>\n<p>워크플로우 및 프로세스 모델링</p>\n<ul>\n<li>비즈니스 프로세스나 워크플로우를 모델링하여 효율적인 작업 흐름을 설계.</li>\n</ul>\n</li>\n<li>\n<p>아키텍처 설계</p>\n<ul>\n<li>시스템의 전체적인 아키텍처를 설계하여 컴포넌트, 계층 구조, 통신 방식 등을 결정.</li>\n</ul>\n</li>\n</ol>\n<p>Design Modeling은 시스템의 구체적인 세부 사항을 정의함으로써 개발자들이 일관된 방식으로 작업하고, 시스템의 설계 결정 사항을 명확히 이해할 수 있도록 한다. 이는 소프트웨어나 제품의 개발 프로세스에서 효율성과 품질을 높이는데 기여한다.</p>","frontmatter":{"title":"Modeling에 대하여","date":"August 16, 2023","update":"August 16, 2023","tags":["oop"],"series":null},"fields":{"slug":"/conceptual-design-modeling/","readingTime":{"minutes":5.595}}},"seriesList":{"edges":[{"node":{"id":"8d1f2fa8-c383-54c7-8643-fcb584053c40","fields":{"slug":"/scala-migration/"},"frontmatter":{"title":"Scala Migration to 2.13"}}},{"node":{"id":"80af0ae2-754d-5f60-ad77-7f116cd162f4","fields":{"slug":"/message-driven-development/"},"frontmatter":{"title":"메시지 지향 프로그래밍"}}},{"node":{"id":"521c99e5-b3b2-566f-b031-319718d3df3e","fields":{"slug":"/state-pattern/"},"frontmatter":{"title":"State Pattern을 선택하는 이유"}}},{"node":{"id":"1b40aa45-37fc-5313-af93-b830bd9ec5e6","fields":{"slug":"/policy-pattern/"},"frontmatter":{"title":"Policy Pattern"}}},{"node":{"id":"2a97d58f-706a-53ac-a1c6-5140580f5fe4","fields":{"slug":"/conceptual-design-modeling/"},"frontmatter":{"title":"Modeling에 대하여"}}},{"node":{"id":"ab6dddb6-d3cd-5006-8566-46b17d4730a5","fields":{"slug":"/solid/"},"frontmatter":{"title":"객체지향 디자인 원칙(SOLID)"}}}]},"previous":{"fields":{"slug":"/policy-pattern/"},"frontmatter":{"title":"Policy Pattern"}},"next":{"fields":{"slug":"/solid/"},"frontmatter":{"title":"객체지향 디자인 원칙(SOLID)"}}},"pageContext":{"id":"2a97d58f-706a-53ac-a1c6-5140580f5fe4","series":null,"previousPostId":"1b40aa45-37fc-5313-af93-b830bd9ec5e6","nextPostId":"ab6dddb6-d3cd-5006-8566-46b17d4730a5"}},"staticQueryHashes":[],"slicesMap":{}}